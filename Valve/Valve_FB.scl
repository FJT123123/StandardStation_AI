TYPE "UDT_Valve_ALM"
VERSION : 0.1
   STRUCT
      OUT_wALM : Word;   // 报警字/用于制作报警，用位来表示每一种报警
   END_STRUCT;

END_TYPE

TYPE "UDT_Valve_HMI"
VERSION : 0.1
   STRUCT
      IN_xNormOpen : Bool;   // 常开常闭阀选择/常开为1，常闭为0
      IN_xALMEnable : Bool := true;   // 报警使能
      IN_xManualOpen : Bool;   // 手动开
      IN_xManualClose : Bool;   // 手动关
      IN_xCounterReset : Bool;   // 计数复位
      IN_xOpenCondition : Bool := true;   // 开阀运行条件
      IN_xCloseCondition : Bool := true;   // 关阀运行条件
      OUT_uiState : UInt;   // 状态字/用于显示状态
      OUT_udiCount : UDInt;   // 计次
   END_STRUCT;

END_TYPE

TYPE "UDT_Valve_Map"
VERSION : 0.1
   STRUCT
      IN_xOpenFeedback : Bool;   // 传感器开
      IN_xCloseFeedback : Bool;   // 传感器关
      OUT_xActualOut : Bool;   // 阀门控制
   END_STRUCT;

END_TYPE

TYPE "UDT_Valve_Retain"
VERSION : 0.1
   STRUCT
      IN_tOpenTime : Time := T#10S;
      IN_tCloseTime : Time := T#10S;
   END_STRUCT;

END_TYPE

TYPE "UDT_Valve_​Variable"
VERSION : 0.1
   STRUCT
      IN_xAutoCmd : Bool;   // 自动模式开阀
      OUT_xOpenOK : Bool;   // 开到位
      OUT_xCloseOK : Bool;   // 关到位
   END_STRUCT;

END_TYPE

FUNCTION_BLOCK "Valve_FB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      IN_xSys_EDS : Bool;//安全联锁
      IN_xM_A : Bool;
      IN_xREST : Bool;
   END_VAR

   VAR_IN_OUT 
      Map : "UDT_Valve_Map";
      Variable : "UDT_Valve_​Variable";
      HMI : "UDT_Valve_HMI";
      "Retain" : "UDT_Valve_Retain";
      ALM : "UDT_Valve_ALM";
   END_VAR

   VAR CONSTANT
      VALVE_STATE_INIT : UInt := 0;        // 初始状态
      VALVE_STATE_CLOSED : UInt := 1;       // 已关闭
      VALVE_STATE_OPENED : UInt := 2;       // 已打开
      VALVE_STATE_OPENING : UInt := 3;      // 正在打开
      VALVE_STATE_CLOSING : UInt := 4;      // 正在关闭
      VALVE_STATE_CLOSE_FAULT : UInt := 5;  // 关阀故障
      VALVE_STATE_OPEN_FAULT : UInt := 6;   // 开阀故障
      VALVE_STATE_SENSOR_FAULT : UInt := 7; // 传感器故障
   END_VAR

   VAR 
      xSensorFault : Bool;   // 传感器故障状态
      xOpenTimeout : Bool;   // 开阀超时状态
      xCloseTimeout : Bool;   // 关阀超时状态
      LastOpenOK : Bool;     // 开到位上升沿检测用
      TON_Open : TON;        // 开阀延时
      TON_Close : TON;       // 关阀延时
      TON_Action : TON;      // 动作时间
      xLastManualOpen : Bool;  // 手动开上升沿
      xLastManualClose : Bool; // 手动关上升沿
      tActionTime : Time;    // 当前动作时间
   END_VAR


BEGIN
    // 安全联锁处理，最高优先级
    IF NOT IN_xSys_EDS THEN
        Map.OUT_xActualOut := 0;
    // 自动/手动模式切换
    ELSIF IN_xM_A THEN
        // 手动模式，增加开关互锁和边沿触发
        IF NOT(HMI.IN_xManualOpen AND HMI.IN_xManualClose) THEN
            IF HMI.IN_xManualOpen AND NOT #xLastManualOpen AND HMI.IN_xOpenCondition THEN
                Map.OUT_xActualOut := NOT HMI.IN_xNormOpen;
            ELSIF HMI.IN_xManualClose AND NOT #xLastManualClose AND HMI.IN_xCloseCondition THEN
                Map.OUT_xActualOut := HMI.IN_xNormOpen;
            END_IF;
        END_IF;
        #xLastManualOpen := HMI.IN_xManualOpen;
        #xLastManualClose := HMI.IN_xManualClose;
    ELSE
        // 自动模式
        IF Variable.IN_xAutoCmd AND HMI.IN_xOpenCondition THEN
            Map.OUT_xActualOut := NOT HMI.IN_xNormOpen;
        ELSIF NOT Variable.IN_xAutoCmd AND HMI.IN_xCloseCondition THEN
            Map.OUT_xActualOut := HMI.IN_xNormOpen;
        END_IF;
    END_IF;
    
    // 开关状态反馈处理
    // 根据报警使能状态选择反馈信号来源
    Variable.OUT_xOpenOK := SEL(HMI.IN_xALMEnable, 
                               (Map.OUT_xActualOut <> HMI.IN_xNormOpen),
                               Map.IN_xOpenFeedback);
    Variable.OUT_xCloseOK := SEL(HMI.IN_xALMEnable,
                                (Map.OUT_xActualOut = HMI.IN_xNormOpen),
                                Map.IN_xCloseFeedback);
    
    // 报警处理
    // 集中处理所有报警相关的逻辑
    IF IN_xREST OR NOT HMI.IN_xALMEnable THEN
        // 复位所有报警状态
        #xSensorFault := FALSE;
        #xOpenTimeout := FALSE;
        #xCloseTimeout := FALSE;
    ELSE
        // 1. 传感器故障检测
        // 开关传感器同时为1或同时为0时，表示传感器故障
        #xSensorFault := (Map.IN_xOpenFeedback AND Map.IN_xCloseFeedback) OR
                         (NOT Map.IN_xOpenFeedback AND NOT Map.IN_xCloseFeedback);
        
        // 2. 超时报警处理
        // 开阀超时，使用TON定时器
        #TON_Open(IN := Map.OUT_xActualOut AND NOT Variable.OUT_xOpenOK,
                  PT := Retain.IN_tOpenTime);
        #xOpenTimeout := #TON_Open.Q;
        
        // 关阀超时，使用TON定时器
        #TON_Close(IN := NOT Map.OUT_xActualOut AND NOT Variable.OUT_xCloseOK,
                   PT := Retain.IN_tCloseTime);
        #xCloseTimeout := #TON_Close.Q;
        
        // 动作时间计算 - 简化逻辑，任何状态都计时
        #TON_Action(IN := TRUE,
                    PT := T#24H);
        #tActionTime := #TON_Action.ET;
    END_IF;
    
    // 3. 报警字更新
    // Bit0: 开阀超时报警
    ALM.OUT_wALM.%X0 := #xOpenTimeout;
    // Bit1: 关阀超时报警
    ALM.OUT_wALM.%X1 := #xCloseTimeout;
    // Bit2: 传感器故障报警
    ALM.OUT_wALM.%X2 := #xSensorFault;
    
    // 计数功能，使用开到位上升沿计数
    // 计数功能，使用开到位上升沿计数
    IF HMI.IN_xCounterReset THEN
        HMI.OUT_udiCount := 0;
    ELSE
        IF Variable.OUT_xOpenOK AND NOT #LastOpenOK THEN
            HMI.OUT_udiCount := HMI.OUT_udiCount + 1;
        END_IF;
    END_IF;
    #LastOpenOK := Variable.OUT_xOpenOK;
    
        // 状态字更新
    IF #xSensorFault THEN
        HMI.OUT_uiState := #VALVE_STATE_SENSOR_FAULT;
    ELSIF #xOpenTimeout THEN
        HMI.OUT_uiState := #VALVE_STATE_OPEN_FAULT;
    ELSIF #xCloseTimeout THEN
        HMI.OUT_uiState := #VALVE_STATE_CLOSE_FAULT;
    ELSIF Variable.OUT_xOpenOK THEN
        HMI.OUT_uiState := #VALVE_STATE_OPENED;
    ELSIF Variable.OUT_xCloseOK THEN
        HMI.OUT_uiState := #VALVE_STATE_CLOSED;
    ELSIF Map.OUT_xActualOut <> HMI.IN_xNormOpen THEN
        HMI.OUT_uiState := #VALVE_STATE_OPENING;
    ELSIF Map.OUT_xActualOut = HMI.IN_xNormOpen THEN
        HMI.OUT_uiState := #VALVE_STATE_CLOSING;
    ELSE
        HMI.OUT_uiState := #VALVE_STATE_INIT;
    END_IF;
END_FUNCTION_BLOCK

