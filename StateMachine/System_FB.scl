FUNCTION_BLOCK "System_FB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      IN_xAutoMode : Bool;   // TRUE=自动模式，FALSE=手动/维护模式
      IN_xRemoteMode : Bool;   // TRUE=远程模式，FALSE=本地模式
      IN_xRemoteStartCmd : Bool;   // 远程模式下的启停命令(1=启动,0=停止)
      IN_xLocalStart : Bool;   // 本地启动按钮
      IN_xLocalStop : Bool;   // 本地停止按钮
      IN_xReset : Bool;   // 故障复位
   END_VAR

   VAR_OUTPUT 
      OUT_xRunning : Bool;   // 系统运行中
      OUT_iSystemState : Int;   // 系统状态（0=初始状态, 1=运行, 2=停止, 3=故障, 4=维护中, 5=紧急停止, 6=运行中预警, 7=停止中预警）
      OUT_iFaultCode : Int;   // 故障代码
      OUT_tRunTime : Time;   // 运行时间（掉电保持）
      OUT_diStartCount : DInt;   // 启动次数（掉电保持）
   END_VAR

   VAR_IN_OUT 
      INOUT_xSafetyInterlock : Bool;   // 安全联锁
      INOUT_xSystemFault : Bool;   // 系统故障信号
      INOUT_xWarningSignal : Bool;   // 预警信号输入
      INOUT_dbALM : DB_ANY;   // 报警数据块
      INOUT_dbPreAlarm : DB_ANY;   // 预警数据块
      INOUT_dbSafetyInterlock : DB_ANY;   // 安全联锁数据块
   END_VAR

   VAR 
      RunTimer {InstructionName := 'TON_TIME'; LibVersion := '1.0'} : TON_TIME;   // 运行时间定时器
      Fault : Bool;   // 故障状态
      Warning : Bool;   // 预警状态
      StartRequest : Bool;   // 启动请求
      StopRequest : Bool;   // 停止请求
      i : Int;   // 循环计数器
   END_VAR

   VAR_TEMP 
      // 报警扫描临时变量
      tempAlarmVariant : Variant;   // 报警DB_ANY_TO_VARIANT转换后的指针
      tempAlarmByteArray : Array[0..249] of Byte;   // 报警临时字节数组
      tempAlarmPos : DInt;   // 报警序列化的POS参数
      tempAlarmError : Word;   // 报警指令错误代码
      
      // 预警扫描临时变量
      tempPreAlarmVariant : Variant;   // 预警DB_ANY_TO_VARIANT转换后的指针
      tempPreAlarmByteArray : Array[0..249] of Byte;   // 预警临时字节数组
      tempPreAlarmPos : DInt;   // 预警序列化的POS参数
      tempPreAlarmError : Word;   // 预警指令错误代码
      
      // 安全联锁扫描临时变量
      tempSafetyInterlockVariant : Variant;   // 安全联锁DB_ANY_TO_VARIANT转换后的指针
      tempSafetyInterlockByteArray : Array[0..249] of Byte;   // 安全联锁临时字节数组
      tempSafetyInterlockPos : DInt;   // 安全联锁序列化的POS参数
      tempSafetyInterlockError : Word;   // 安全联锁指令错误代码
   END_VAR


BEGIN
	    REGION 启动停止控制
	    // 检查启动和停止请求
	    // 注：手动/维护模式下不允许启动和停止系统，但可以手动操作单个设备
	    #StartRequest := #IN_xAutoMode AND ((#IN_xRemoteMode AND #IN_xRemoteStartCmd) OR (NOT #IN_xRemoteMode AND #IN_xLocalStart));
	    #StopRequest := #IN_xAutoMode AND ((#IN_xRemoteMode AND NOT #IN_xRemoteStartCmd) OR (NOT #IN_xRemoteMode AND #IN_xLocalStop));
	    END_REGION
	    
	    REGION 故障复位处理
	    // 处理故障复位逻辑
	    IF #IN_xReset THEN
	        #Fault := FALSE;
	        #OUT_iFaultCode := 0;
	        #INOUT_xSafetyInterlock := TRUE;
	        #INOUT_xSystemFault := FALSE;
	        #INOUT_xSafetyInterlock := FALSE;
	    END_IF;
	    END_REGION
	    
	    REGION 运行控制逻辑
	    // 系统运行控制逻辑
	    IF NOT #Fault AND NOT #INOUT_xSafetyInterlock AND #IN_xAutoMode THEN
	        // 处理启动请求
	        IF #StartRequest AND NOT #OUT_xRunning THEN
	            #OUT_xRunning := TRUE;
	            #OUT_diStartCount := #OUT_diStartCount + 1;
	        END_IF;
	        
	        // 处理停止请求
	        IF #StopRequest AND #OUT_xRunning THEN
	            #OUT_xRunning := FALSE;
	        END_IF;
	    ELSE
	        #OUT_xRunning := FALSE;
	    END_IF;
	    END_REGION
	    
	    REGION 运行时间计时
	    // 系统运行时间统计
	    IF #OUT_xRunning THEN
	        #RunTimer(IN := TRUE,
	                  PT := T#24H);
	        IF #RunTimer.Q THEN
	            #RunTimer.IN := FALSE;
	            #OUT_tRunTime := #OUT_tRunTime + T#24H;
	        END_IF;
	    ELSE
	        #RunTimer.IN := FALSE;
	    END_IF;
	    END_REGION
	    
	    REGION 报警和预警扫描
	    // 扫描报警数据块
	    #tempAlarmVariant := DB_ANY_TO_VARIANT(in := #INOUT_dbALM, err => #tempAlarmError);
	    IF #tempAlarmError <> 0 THEN
	        #INOUT_xSystemFault := TRUE;
	        RETURN;
	    END_IF;
	    
	    // 序列化报警数据到临时字节数组
	    #tempAlarmPos := 0;
	    IF Serialize(SRC_VARIABLE := #tempAlarmVariant,
	                     DEST_ARRAY => #tempAlarmByteArray,
	                     POS := #tempAlarmPos) <> 0 THEN
	        #INOUT_xSystemFault := TRUE;
	        RETURN;
	    END_IF;
	    
	    // 扫描字节数组检查报警
	    FOR #i := 0 TO #tempAlarmPos - 1 BY 1 DO
	        IF #tempAlarmByteArray[#i] <> 0 THEN
	            #INOUT_xSystemFault := TRUE;
	            RETURN;
	        END_IF;
	    END_FOR;
	    
	    // 扫描预警数据块
	    #tempPreAlarmVariant := DB_ANY_TO_VARIANT(in := #INOUT_dbPreAlarm, err => #tempPreAlarmError);
	    IF #tempPreAlarmError <> 0 THEN
	        #INOUT_xSystemFault := TRUE;
	        RETURN;
	    END_IF;
	    
	    // 序列化预警数据到临时字节数组
	    #tempPreAlarmPos := 0;
	    IF Serialize(SRC_VARIABLE := #tempPreAlarmVariant,
	                     DEST_ARRAY => #tempPreAlarmByteArray,
	                     POS := #tempPreAlarmPos) <> 0 THEN
	        #INOUT_xSystemFault := TRUE;
	        RETURN;
	    END_IF;
	    
	    // 扫描字节数组检查预警，自动恢复预警状态
	    #INOUT_xWarningSignal := FALSE;
	    FOR #i := 0 TO #tempPreAlarmPos - 1 BY 1 DO
	        IF #tempPreAlarmByteArray[#i] <> 0 THEN
	            #INOUT_xWarningSignal := TRUE;
	            EXIT;
	        END_IF;
	    END_FOR;
	    
	    // 更新状态变量
	    #Warning := #INOUT_xWarningSignal;
	    #Fault := #INOUT_xSystemFault OR #OUT_iFaultCode <> 0;
	    END_REGION
		
		REGION 安全联锁扫描
			// 扫描安全联锁数据块
			#tempSafetyInterlockVariant := DB_ANY_TO_VARIANT(in := #INOUT_dbSafetyInterlock, err => #tempSafetyInterlockError);
			IF #tempSafetyInterlockError <> 0 THEN
				#INOUT_xSafetyInterlock := TRUE;
				RETURN;
			END_IF;
			
			// 序列化安全联锁数据到临时字节数组
			#tempSafetyInterlockPos := 0;
			IF Serialize(SRC_VARIABLE := #tempSafetyInterlockVariant,
							 DEST_ARRAY => #tempSafetyInterlockByteArray,
							 POS := #tempSafetyInterlockPos) <> 0 THEN
				#INOUT_xSafetyInterlock := TRUE;
				RETURN;
			END_IF;
			
			// 扫描字节数组检查安全联锁
			FOR #i := 0 TO #tempSafetyInterlockPos - 1 BY 1 DO
				IF #tempSafetyInterlockByteArray[#i] <> 0 THEN
					#INOUT_xSafetyInterlock := TRUE;
					RETURN;
				END_IF;
			END_FOR;
			END_REGION
		   
	    REGION 状态显示
	    // 状态优先级判断（紧急停止 > 故障 > 维护 > 预警 > 运行 > 停止）
	    IF #INOUT_xSafetyInterlock THEN
	        #OUT_iSystemState := 5;  // 安全联锁状态
	    ELSIF #Fault THEN
	        #OUT_iSystemState := 3;  // 故障状态
	    ELSIF NOT #IN_xAutoMode THEN
	        #OUT_iSystemState := 4;  // 维护状态
	    ELSIF #Warning AND #OUT_xRunning THEN
	        #OUT_iSystemState := 6;  // 运行中预警状态
	    ELSIF #Warning AND NOT #OUT_xRunning THEN
	        #OUT_iSystemState := 7;  // 停止中预警状态
	    ELSIF #OUT_xRunning THEN
	        #OUT_iSystemState := 1;  // 运行状态
	    ELSE
	        #OUT_iSystemState := 2;  // 停止状态
	    END_IF;
	    END_REGION
	    
END_FUNCTION_BLOCK



