FUNCTION_BLOCK "EnergyCalculator_FB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      IN_rRawValue : Real := 0.0;   // 鍘熷鑳借€楀€?
      IN_rCoefficient : Real := 1.0;   // 鑳借€楄浆鎹㈢郴鏁?
      IN_xReset : Bool := FALSE;   // 澶嶄綅淇″彿
   END_VAR

   VAR_OUTPUT RETAIN
      OUT_Data : "UDT_EnergyData";   // 鑳借€楁暟鎹緭鍑?
   END_VAR

   VAR RETAIN
      xFirstScan : Bool := TRUE;   // 棣栨鎵弿鏍囧織
      iLastHour : Int := 0;   // 涓婁竴娆¤褰曠殑灏忔椂鍊?
      iLastDay : Int := 0;   // 涓婁竴娆¤褰曠殑鏃ユ湡鍊?
      iLastMonth : Int := 0;   // 涓婁竴娆¤褰曠殑鏈堜唤鍊?
      rHourAccumulator : Real := 0.0;   // 灏忔椂绱鍣?
      rDayAccumulator : Real := 0.0;   // 鏃ョ疮璁″櫒
      rMonthAccumulator : Real := 0.0;   // 鏈堢疮璁″櫒
      rLastRawValue : Real := 0.0;   // 涓婁竴娆″師濮嬪€?
   END_VAR

   VAR_TEMP 
      dtSystemTime {InstructionName := 'DTL'; LibVersion := '1.0'} : DTL;
      INT1 : Int;
   END_VAR


BEGIN
	    // 棣栨鎵弿鍒濆鍖?
	    #INT1 := RD_SYS_T(OUT => #dtSystemTime);
	    IF #xFirstScan THEN
	        #xFirstScan := FALSE;
	        #OUT_Data.dtLastHourReset := #dtSystemTime;
	        #OUT_Data.dtLastDayReset := #dtSystemTime;
	        #OUT_Data.dtLastMonthReset := #dtSystemTime;
	        #iLastHour := #dtSystemTime.HOUR;
	        #iLastDay := #dtSystemTime.DAY;
	        #iLastMonth := #dtSystemTime.MONTH;
	        #rLastRawValue := #IN_rRawValue;
	    END_IF;
	    
	    // 澶嶄綅澶勭悊
	    IF #IN_xReset THEN
	        #OUT_Data.rCurrentValue := 0.0;
	        #OUT_Data.rHourlyValue := 0.0;
	        #OUT_Data.rDailyValue := 0.0;
	        #OUT_Data.rMonthlyValue := 0.0;
	        #OUT_Data.rYearlyValue := 0.0;
	        #rHourAccumulator := 0.0;
	        #rDayAccumulator := 0.0;
	        #rMonthAccumulator := 0.0;
	        RETURN;
	    END_IF;
	    
	    // 璁＄畻澧為噺鍊?
	    #OUT_Data.rCurrentValue := (#IN_rRawValue - #rLastRawValue) * #IN_rCoefficient;
	    
	    // 灏忔椂绱澶勭悊
	    #rHourAccumulator := #rHourAccumulator + #OUT_Data.rCurrentValue;
	    // 瀹炴椂鏇存柊灏忔椂绱鍊?
	    #OUT_Data.rHourlyValue := #rHourAccumulator;
	    IF #dtSystemTime.HOUR <> #iLastHour THEN
	        // 淇濆瓨涓婁竴灏忔椂鏁版嵁鍒板巻鍙叉暟缁?
	        #OUT_Data.aHourlyHistory[#iLastHour] := #rHourAccumulator;
	        // 閲嶇疆绱鍣?
	        #rHourAccumulator := 0.0;
	        // 鏇存柊鏃堕棿鎴?
	        #OUT_Data.dtLastHourReset := #dtSystemTime;
	        #iLastHour := #dtSystemTime.HOUR;
	    END_IF;
	    
	    // 鏃ョ疮璁″鐞?
	    #rDayAccumulator := #rDayAccumulator + #OUT_Data.rCurrentValue;
	    // 瀹炴椂鏇存柊鏃ョ疮璁″€?
	    #OUT_Data.rDailyValue := #rDayAccumulator;
	    IF #dtSystemTime.DAY <> #iLastDay THEN
	        // 淇濆瓨涓婁竴澶╂暟鎹埌鍘嗗彶鏁扮粍
	        #OUT_Data.aDailyHistory[#iLastDay] := #rDayAccumulator;
	        // 閲嶇疆绱鍣?
	        #rDayAccumulator := 0.0;
	        // 鏇存柊鏃堕棿鎴?
	        #OUT_Data.dtLastDayReset := #dtSystemTime;
	        #iLastDay := #dtSystemTime.DAY;
	    END_IF;
	    
	    // 鏈堢疮璁″鐞?
	    #rMonthAccumulator := #rMonthAccumulator + #OUT_Data.rCurrentValue;
	    // 瀹炴椂鏇存柊鏈堢疮璁″€?
	    #OUT_Data.rMonthlyValue := #rMonthAccumulator;
	    
	    // 鏇存柊涓婁竴娆″師濮嬪€?
	    #rLastRawValue := #IN_rRawValue;
	    IF #dtSystemTime.MONTH <> #iLastMonth THEN
	        // 淇濆瓨涓婁竴鏈堟暟鎹埌鍘嗗彶鏁扮粍
	        #OUT_Data.aMonthlyHistory[#iLastMonth] := #rMonthAccumulator;
	        // 閲嶇疆绱鍣?
	        #rMonthAccumulator := 0.0;
	        // 鏇存柊鏃堕棿鎴?
	        #OUT_Data.dtLastMonthReset := #dtSystemTime;
	        #iLastMonth := #dtSystemTime.MONTH;
	    END_IF;
	    
	    // 鏇存柊鐘舵€?
	    #OUT_Data.xDataValid := TRUE;
	    
END_FUNCTION_BLOCK

